using System;
using System.Collections.Generic;
using System.Text;

namespace Aces
{
    public class EnemyPilot : Pilot
    {
        private Book book;

        private static Random rand = new Random();
        #region Directions
        private static string[] goDirections =
        {
            "Go direction",
            "left",
            "straight",
            "right",
            "right",
            "right",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "straight",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "righ",
            "left",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "left",
            "straight",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "straight",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "straight",
            "straight",
            "right",
            "right",
            "left",
            "straight",
            "straight",
            "right",
            "right",
            "right",
            "right",
            "straight",
            "straight",
            "right",
            "right",
            "right",
            "right",
            "straight",
            "straight",
            "straight",
            "left",
            "straight",
            "straight",
            "left",
            "left",
            "left",
            "left",
            "straight",
            "straight",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "straight",
            "left",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "left",
            "right",
            "right",
            "right",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "left",
            "straight",
        };
        #endregion
        public EnemyPilot(Book book) { this.book = book; }
        override public string getNextManeuver(int page, string playerManeuver)
        {
            Predicate<Maneuvers.Details> pred1 = details => details.Difficult == false;
            string goDirection = goDirections[page];
            Predicate<Maneuvers.Details> pred2 = (details => pred1(details) && details.Direction == goDirection);
            bool tail = book.LookupBool("Tail", page);
            Predicate<Maneuvers.Details> pred3 = pred2;
            if (tail)
            {
                string speed = null;
                string range = book.Lookup("Range", page);

                if (range == "Short") speed = "cruise";
                if (range == "Medium") speed = "fast";
                if (range == "Long") speed = "fast";

                if (speed != null) pred3 = (details => pred2(details) && details.Speed == speed);
            }
            List<string> options = Maneuvers.Select(pred3);
            if (options.Count == 0) return "Straight";
            int index = rand.Next(options.Count);
            return options[index];
        }

        public override int GetDamage(int range)
        {
            return range;
        }
    }
}
